@model List<Mozaic.PasswordManager.Web.Models.ViewModels.UserAccountViewModel>

<h2>User Accounts</h2>

<!-- Search Form -->
<div class="mb-3">
    <form method="get">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by Account Name" name="accountName" value="@Context.Request.Query["accountName"]" />
            <input type="text" class="form-control ms-2" placeholder="Search by User Name" name="userName" value="@Context.Request.Query["userName"]" />
            <button class="btn btn-primary" type="submit">
                <i class="bi bi-search"></i> 
            </button>
            <button type="button" class="btn btn-secondary ms-2" id="clearSearchBtn">
                <i class="bi bi-x-circle"></i> 
            </button>
        </div>
    </form>
</div>

<!-- Display the number of results found -->
<div class="mb-3">
    @if (Model != null)
    {
        <p>Showing @Model.Count() result(s).</p>
    }
</div>

<table class="table">
    <thead>
        <tr>
            <th>Account Name</th>
            <th>User Name</th>
            <th>Password</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <div class="mb-3">
            <a href="@Url.Action("Create", "UserAccount")" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Add Password
            </a>
        </div>
        @foreach (var account in Model)
        {
            <tr>
                <td>@account.AccountName</td>
                <td>@account.UserName</td>
                <td id="password-@account.Id">****</td> <!-- Placeholder for password -->
                <td>
                    <button class="btn btn-primary view-password-btn" data-account-id="@account.Id">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-secondary copy-password-btn" data-account-id="@account.Id">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Password Decryption Modal -->
<div class="modal fade" id="decryptModal" tabindex="-1" aria-labelledby="decryptModalLabel" aria-hidden="true" style="z-index: 1051;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="decryptModalLabel">Enter Encryption Key</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="encryptionKey">Encryption Key</label>
                    <input type="password" id="encryptionKey" class="form-control" />
                    <input type="hidden" id="accountId" /> <!-- Hidden field to store the account ID -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="decryptPasswordBtn">Decrypt Password</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // When the "View Password" button is clicked, open the modal and store the account ID
        $('.view-password-btn, .copy-password-btn').on('click', function () {
            var accountId = $(this).data('account-id');
            $('#accountId').val(accountId);  // Store the account ID in the hidden input

            // Store the action (view or copy) in a data attribute
            $('#decryptModal').data('action', $(this).hasClass('view-password-btn') ? 'view' : 'copy');

            // Open the modal and immediately remove the backdrop
            $('#decryptModal').modal('show').on('shown.bs.modal', function () {
                $('.modal-backdrop').remove();  // Ensure modal backdrop is removed
            });
        });

        // Handle the decryption process when the "Decrypt Password" button is clicked
        $('#decryptPasswordBtn').on('click', function () {
            var encryptionKey = $('#encryptionKey').val();  // Get the encryption key from the modal
            var accountId = $('#accountId').val();  // Get the account ID

            // Send an AJAX request to the server to decrypt the password
            $.ajax({
                url: '@Url.Action("DecryptPassword", "UserAccount")', // Call the DecryptPassword action
                type: 'POST',
                data: {
                    id: accountId,
                    encryptionKey: encryptionKey
                },
                success: function (response) {
                    var decryptedPassword = response.decryptedPassword;

                    // Determine the action based on the data attribute
                    var action = $('#decryptModal').data('action');
                    if (action === 'view') {
                        // Replace the password placeholder with the decrypted password
                        $('#password-' + accountId).text(decryptedPassword);
                    } else if (action === 'copy') {
                        // Copy the decrypted password to clipboard
                        navigator.clipboard.writeText(decryptedPassword).then(function () {
                            alert('Password copied to clipboard!');
                        }).catch(function (err) {
                            alert('Failed to copy password: ' + err);
                        });
                    }

                    $('#decryptModal').modal('hide'); // Close the modal
                },
                error: function () {
                    alert('Failed to decrypt the password.');
                }
            });
        });

        // Handle the clear search button click
        $('#clearSearchBtn').on('click', function () {
            // Refresh the page
            window.location.href = window.location.pathname; // Redirect to the current page without query parameters
        });

        // Ensure that the backdrop is removed when the modal is closed
        $('#decryptModal').on('hidden.bs.modal', function () {
            $('.modal-backdrop').remove();  // Ensure modal backdrop is removed
        });
    });
</script>
